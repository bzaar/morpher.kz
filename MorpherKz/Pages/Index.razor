@page "/"

@using Morpher.WebService.V3
@using Morpher.WebService.V3.Qazaq

@inject IJSRuntime JSRuntime;

<h1>Склонение по падежам на казахском языке</h1>

<p>
    <input @oninput="OnInput" id="searchInput"/>
</p>

@if (_exception != null)
{
<pre class="alert-danger">@_exception</pre>
}
else if (_error != null)
{
    <p>@_error</p>
}
else if (_declensionResult != null)
{
<table class="table">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th>Менiң</th>
            <th>Біздiң</th>
            <th>Сенiң</th>
            <th>Сіздiң</th>
            <th>Оның</th>
        </tr>
        <tr>
            <th colspan="4"></th>
            <th>Сендердiң</th>
            <th>Сіздердiң</th>
            <th>Олардың</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var c in Cases)
        {
        <tr>
            <th rowspan="2">@c.Key</th>
            <td>@c.Value(_declensionResult)</td>
            <td>@c.Value(_declensionResult.FirstPerson)</td>
            <td>@c.Value(_declensionResult.FirstPersonPlural)</td>
            <td>@c.Value(_declensionResult.SecondPerson)</td>
            <td>@c.Value(_declensionResult.SecondPersonRespectful)</td>
            <td>@c.Value(_declensionResult.ThirdPerson)</td>
        </tr>
        <tr>
            <td>@(_declensionResult.Plural == null ? "" : c.Value(_declensionResult.Plural))</td>
            <td>@(_declensionResult.Plural == null ? "" : c.Value(_declensionResult.Plural.FirstPerson))</td>
            <td>@(_declensionResult.Plural == null ? "" : c.Value(_declensionResult.Plural.FirstPersonPlural))</td>
            <td>@c.Value(_declensionResult.SecondPersonPlural)</td>
            <td>@c.Value(_declensionResult.SecondPersonRespectfulPlural)</td>
            <td>@c.Value(_declensionResult.ThirdPersonPlural)</td>
        </tr>
        }
    </tbody>
</table>
}
else
{
    <p> 
        Введите слово для склонения, например, <span class="target"><em>программист</em></span>, <span class="target"><em>программист2</em></span>.
    </p>
}

@code {

    static readonly Dictionary<string, Func<DeclensionForms, string>> Cases = new Dictionary<string, Func<DeclensionForms, string>>
    {
        {"Nom", f => f.Nominative },
        {"Gen", f => f.Genitive},
        {"Dat", f => f.Dative },
        {"Acc", f => f.Accusative},
        {"Ins", f => f.Instrumental},
        {"Abl", f => f.Ablative},
        {"Loc", f => f.Locative},
    };

    DeclensionResult _declensionResult;

    MorpherClient _morpher = new MorpherClient();
    Exception _exception;
    string _error;

    void OnInput(ChangeEventArgs e)
    {
        try
        {
            _error = null;
            _exception = null;
            _declensionResult = null;
            _declensionResult = _morpher.Qazaq.Parse((string) e.Value);
        }
        catch (ArgumentNotQazaqException)
        {
            _error = "Желательно по-казахски.";
        }
        catch (ArgumentEmptyException)
        {
            
        }
        catch (Exception ex)
        {
            _exception = ex;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("funcions.focusSearchInput");
            await JSRuntime.InvokeVoidAsync("funcions.addEvent");
        }
    }
}