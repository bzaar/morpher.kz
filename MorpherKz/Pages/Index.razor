@page "/"

@using Morpher.WebService.V3
@using Morpher.WebService.V3.Qazaq

@inject IJSRuntime JsRuntime

<h1>Программа склонения по падежам на казахском языке</h1>

<p>
    <input id="word" @oninput="OnInput" />
    <span class="number">@_number</span> 
</p>

<p>
    Введите слово для склонения, например:
    @{
        var examples = Examples[DateTime.Now.Minute / 5 % Examples.Length];   
    } 
    @foreach (var word in examples)
    {
        <a href="#" class="example" @onclick="@(e => OnClick(word))">@word</a>
    }
</p>

@if (_exception != null)
{
<pre class="alert-danger">@_exception</pre>
}
else if (_error != null)
{
    <p>@_error</p>
}
else if (_declensionResult != null)
{
    <table class="table">
        <thead>
            @if (_declensionResult.Plural != null)
            {    
            <tr>
                <th colspan="3"></th>
                <th>Менiң</th>
                <th>Біздiң</th>
                <th>Сенiң</th>
                <th>Сіздiң</th>
                <th>Оның</th>
            </tr>
            <tr>
                <th colspan="5"></th>
                <th>Сендердiң</th>
                <th>Сіздердiң</th><th>Олардың</th>
            </tr>
        }
        else
        {
            <tr>
                <th colspan="3"></th>
                <th>Менiң</th> <th>Біздiң</th> <th>Сенiң, Сендердiң</th> <th>Сіздiң, Сендердiң</th> <th>Оның,Олардың</th>
            </tr>}
        </thead>
        <tbody>
            @foreach (var c in Cases)
            {
                <tr>
                    <th rowspan="@(_declensionResult.Plural == null ? 1 : 2)">@c.Key.Item2</th>
                <th rowspan="@(_declensionResult.Plural == null ? 1 : 2)"><em>@c.Key.Item1</em></th>
                    <td>@c.Value(_declensionResult)</td>
                    <td>@c.Value(_declensionResult.FirstPerson)</td>
                    <td>@c.Value(_declensionResult.FirstPersonPlural)</td>
                    <td>@c.Value(_declensionResult.SecondPerson)</td>
                    <td>@c.Value(_declensionResult.SecondPersonRespectful)</td>
                    <td>@c.Value(_declensionResult.ThirdPerson)</td>
                </tr>
                @if (_declensionResult.Plural != null)
            {
                <tr>
                    <td>@c.Value(_declensionResult.Plural)</td>
                    <td>@c.Value(_declensionResult.Plural.FirstPerson)</td>
                    <td>@c.Value(_declensionResult.Plural.FirstPersonPlural)</td>
                    <td>@c.Value(_declensionResult.SecondPersonPlural)</td>
                    <td>@c.Value(_declensionResult.SecondPersonRespectfulPlural)</td>
                    <td>@c.Value(_declensionResult.ThirdPersonPlural)</td>
                </tr>}
            }
        </tbody>
    </table>
}

<div id="vk_comments"></div>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("display_vk_comments");
        }
    }
    
    static readonly string[][] Examples =
    {
        new [] { "бағдарламашы", "маманы", "бас бухгалтер" },
        new [] { "қыз", "әже", "отбасы", "мұғалім" },
        new [] { "Алматы қаласы", "парк", "аю" },
        new [] { "доллар", "айлар", "принтер", "парктер" },
    };

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await SelectInput();
        }
    }

    private async Task SelectInput()
    {
        await JsRuntime.InvokeAsync<object>("focusElement", "word");
    }

    private async Task SetValue(string text)
    {
        await JsRuntime.InvokeAsync<object>("SetValueById", "word", text);
    }
    
    static readonly Dictionary<(string, string), Func<DeclensionForms, string>> Cases = new Dictionary<(string, string), Func<DeclensionForms, string>>
    {
        {("кім? не?", "Атау"), f => f.Nominative },
        {("кімнің? ненің?", "Ілік"), f => f.Genitive},
        {("кімге? неге? қайда?", "Барыс"), f => f.Dative },
        {("кімде? неде?", "Жатыс"), f => f.Locative},
        {("кімді? нені?", "Табыс"), f => f.Accusative},
        {("кімнен? неден? қайдан?", "Шығыс"), f => f.Ablative},
        {("кіммен? немен? қалай?", "Көмектес"), f => f.Instrumental},
    };

    readonly MorpherClient _morpher = new MorpherClient(Guid.Parse("ba4fc26c-b689-4207-a8d9-7542f2ee287d"));
    
    DeclensionResult _declensionResult;
    Exception _exception;
    string _error;
    string _number;

    void OnInput(ChangeEventArgs e)
    {
        UpdateTable((string)e.Value);
    }
    
    async void OnClick(string word)
    {
        UpdateTable(word);
        await SetValue(word);
    }
    
    void UpdateTable(string text)
    {
        try
        {
            _number = null;
            _error = null;
            _exception = null;
            _declensionResult = null;
            _declensionResult = _morpher.Qazaq.Parse(text);
            _number = "Число: " + (_declensionResult.Plural != null ? "единственное" : "множественное");
        }
        catch (ArgumentNotQazaqException)
        {
            _error = "Желательно по-казахски.";
        }
        catch (ArgumentEmptyException)
        {

        }
        catch (Exception ex)
        {
            _exception = ex;
        }
    }
}
